{
  "name": "random",
  "version": "1.0.0beta-1",
  "description": "A Random.org client",
  "keyword": [
    "random",
    "client",
    "random.org",
    "lottery",
    "raffle"
  ],
  "author": {
    "name": "Rodger Combs",
    "email": "rodger.combs@gmail.com",
    "url": "http://combsconnections.tk/"
  },
  "contributors": [],
  "main": "./main",
  "directories": [
    "./lib"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/11rcombs/node-random.git"
  },
  "scripts": {},
  "config": {},
  "engines": {
    "node": ">=0.4.8"
  },
  "dependencies": {},
  "devDependencies": {},
  "readme": "# random\nRandom is a simple RANDOM.ORG client for node. It asynchronously retrieves true random numbers for use in your programs, formatted in rows and columns.\n\n# Install\nfor [node.js](http://nodejs.org/) and [npm](http://github.com/isaacs/npm):\n\n\tnpm install random\n\n# Use\n## All functions\nAll functions in this library accept three arguments: A callback for the result, a hash of options, and a callback for error messages.\nAll three arguments are optional. The default result callback is `console.log`, the default options are listed for each function, and the default error handler `console.error()`s the error in a human-readable string.\nThe error callback takes three arguments: the error type (\"ServerError\" or \"RequestError\"), the request status code, and the server's response data.\n\n## `generateIntegers`\nThe `generateIntegers` function asynchronously retrieves a customizable table of true random integers.\n\n### Basic Example\n\n    random = require(\"random\");\n    function randomCallback(integers){\n\t// Prints row 0, column 0\n        console.log(integers[0][0]);\n    }\n    var options = {};\n    function errorCallback(type,code,string){\n        console.log(\"RANDOM.ORG Error: Type: \"+type+\", Status Code: \"+code+\", Response Data: \"+string);\n    }\n    random.generateIntegers(randomCallback,options,errorCallback);\n\n### Options\nBy default, we request insecurely, and return one new base-10 integer from 0 to 10,000 in a one-column \"table\". The options available are:\n+ secure:\tBoolean:\t\tIf true, use https. Otherwise, use http.\n+ num:\t\tInteger [0,1e4]:\tNumber of random integers to retrieve\n+ min:\t\tInteger [-1e9,1e9]:\tMinimum value\n+ max:\t\tInteger [-1e9,1e9]:\tMaximum value\n+ col:\t\tInteger [1,1e4]:\tNumber of \"columns\"\n+ base\t\tInteger [2,8,10,16]:\tBase to use (binary, octal, decimal, or hexadecimal)\n+ rnd:\t\tString:\t\t\tWhich set of random number to use (see \"rnd\" below)\n\n### Example with options\n\n    random = require(\"random\");\n    options = {\n        secure: true, // Make the request secure\n        num: 10,      // Get 10 integers\n        min: -10,     // Minimum of -10\n        max: 10,      // Maximum of 10\n        col: 2,       // 2 columns\n        base: 16,     // Use Base 16\n        rnd: \"id.123\" // Which set of random numbers to use\n    }\n    function randomCallback(integers){\n        // Prints row 1, column 4\n        console.log(integers[1][4]);\n    }\n    random.generateIntegers(randomCallback,options);\n\n## `generateSequence`\nThe `generateSequence` function asynchronously retrieves a customizable table containing a truly random non-repetitive sequence of integers.\n\n### Basic Example\n\n    random = require(\"random\");\n    function randomCallback(sequence){\n\t// Prints the entire sequence\n        console.log(sequence);\n    }\n    var options = {};\n    function errorCallback(type,code,string){\n        console.log(\"RANDOM.ORG Error: Type: \"+type+\", Status Code: \"+code+\", Response Data: \"+string);\n    }\n    random.generateSequence(randomCallback,options,errorCallback);\n\n### Options\nBy default, we request insecurely, and return a sequence of base-10 integers from 0 to 10 in a one-column \"table\". The options available are:\n+ secure:\tBoolean:\t\tIf true, use https. Otherwise, use http.\n+ min:\t\tInteger [-1e9,1e9]:\tLower bound of sequence\n+ max:\t\tInteger [-1e9,1e9]:\tUpper bound of sequence\n+ col:\t\tInteger [1,1e9]:\tNumber of \"columns\"\n+ base\t\tInteger [2,8,10,16]:\tBase to use (binary, octal, decimal, or hexadecimal)\n+ rnd:\t\tString:\t\t\tWhich set of random number to use (see \"rnd\" below)\n\n### Example with options\n    random = require(\"random\");\n    options = {\n        secure: true, // Make the request secure\n        min: -10,     // Lower bound -10\n        max: 10,      // Upper bound 10\n        col: 2,       // 2 columns\n        base: 16,     // Use Base 16\n        rnd: \"id.123\" // Which set of random numbers to use\n    }\n    function randomCallback(sequence){\n        // Prints entire sequence\n        console.log(sequence);\n    }\n    random.generateIntegers(randomCallback,options);\n\n## `generateStrings`\nThe `generateStrings` function asynchronously retrieves an array of customizable truly random strings.\n\n### Basic Example\n\n    random = require(\"random\");\n    function randomCallback(string){\n\t// Prints the string\n        console.log(string[0]);\n    }\n    var options = {};\n    function errorCallback(type,code,string){\n        console.log(\"RANDOM.ORG Error: Type: \"+type+\", Status Code: \"+code+\", Response Data: \"+string);\n    }\n    random.generateStrings(randomCallback,options,errorCallback);\n\n### Options\nBy default, we request insecurely, and return a single 10-character-long non-unique string containing digits 0-9 and uppercase and lowercase letters. The options available are:\n+ secure:\tBoolean:\t\tIf true, use https. Otherwise, use http.\n+ num:\t\tInteger [1,1e4]:\tNumber of strings to retrieve\n+ len:\t\tInteger [1,20]:\t\tLength of the strings\n+ digits:\tBoolean:\t\tWhether or not to include the digits 0-9\n+ upper:\tBoolean:\t\tWhether or not to include the uppercase letters A-Z\n+ lower:\tBoolean:\t\tWhether or not to include the lowercase letters a-z\n+ unique:\tBoolean:\t\tWhether or not to ensure that no two strings returned match each other\n+ rnd:\t\tString:\t\t\tWhich set of random number to use (see \"rnd\" below)\n\n### Example with options\n    random = require(\"random\");\n    options = {\n        secure: true, // Make the request secure\n        num: 10,      // Get 10 strings\n        len: 15,      // 15 characters long\n        digits: true  // Include digits\n        upper: false  // Exclude uppercase letters\n        lower: true   // Include lowercase letters\n\tunique: true  // Make each one unique\n        rnd: \"id.123\" // Which set of random numbers to use\n    }\n    function randomCallback(sequence){\n        // Prints all strings\n        console.log(sequence);\n    }\n    random.generateStrings(randomCallback,options);\n\n## `checkQuota`\nThe `checkQuota` function asynchronously checks to see how many bits a given IP is allowed to use before its next top-off. When this becomes negative, the machine in question is not allowed to request any more random numbers until it is either topped off automatically, or more bits are bought for it at [random.org/quota](http://random.org/quota/)\n\n### Basic Example\n\n    random = require(\"random\");\n    function quotaCallback(quota){\n\t// Prints the remaining quota bits\n        console.log(quota);\n    }\n    var options = {};\n    function errorCallback(type,code,string){\n        console.log(\"RANDOM.ORG Error: Type: \"+type+\", Status Code: \"+code+\", Response Data: \"+string);\n    }\n    random.checkQuota(quotaCallback,options,errorCallback);\n\n### Options\nBy default, we request insecurely, and check the quota for the current machine's IP.\n+ secure:\tBoolean:\t\tIf true, use https. Otherwise, use http.\n+ ip:\t\tString:\t\t\tIP Address to check quota for\n\n### Example with options\n    random = require(\"random\");\n    options = {\n        secure: true,       // Make the request secure\n        ip: \"134.226.36.80\" // Get the quota for random.org's server\n    }\n    function quotaCallback(quota){\n        // Prints the remaining quota bits\n        console.log(quota);\n    }\n    random.checkQuota(quotaCallback,options);\n\n## rnd value\n\nThe rnd value in the options hash is a bit complicated. You have three options with it:\n+ \"new\": generate a new set of true random numbers, then discard them afterwards.\n+ \"id.YOUR_ID_GOES_HERE\": If the ID given has been used before, use those numbers. Otherwise, generate a new set.\n+ \"date.YOUR_DATE_GOES_HERE\": Use a pregenerated set of numbers from a certain date. The date must be in ISO 8601 format (i.e., YYYY-MM-DD) or one of the two shorthand strings today or yesterday. \n",
  "_id": "random@1.0.0beta-1",
  "dist": {
    "shasum": "2adb965283953a31da4a75b0bad98c988eb946c2"
  },
  "_from": "random"
}
